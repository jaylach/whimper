{
  "name": "when",
  "version": "2.7.1",
  "description": "A lightweight Promises/A+ and when() implementation, plus other async goodies.",
  "keywords": [
    "Promises/A+",
    "promises-aplus",
    "promise",
    "promises",
    "deferred",
    "deferreds",
    "when",
    "async",
    "asynchronous",
    "cujo",
    "ender"
  ],
  "homepage": "http://cujojs.com",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/cujojs/when"
  },
  "bugs": {
    "url": "https://github.com/cujojs/when/issues"
  },
  "maintainers": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    }
  ],
  "contributors": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    },
    {
      "name": "Scott Andrews"
    }
  ],
  "devDependencies": {
    "curl": "https://github.com/cujojs/curl/tarball/0.7.3",
    "test-support": "~0.3",
    "promises-aplus-tests": "~2",
    "benchmark": "~1",
    "microtime": "~0",
    "browserify": "~2"
  },
  "main": "when",
  "ender": {
    "files": [
      "*.js",
      "node/*.js",
      "unfold/*.js",
      "monitor/*.js"
    ]
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec",
    "ci": "npm test && sauceme",
    "tunnel": "sauceme -m",
    "start": "buster static -e browser",
    "benchmark": "node benchmark/promise && node benchmark/map",
    "browserify": "browserify -s when build/when.browserify.js -o build/when.js",
    "browserify-debug": "browserify -s when build/when.browserify-debug.js -o build/when.js"
  },
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n- [What's new](CHANGES.md)\n- [API docs](docs/api.md#api)\n- [Examples](https://github.com/cujojs/when/wiki/Examples)\n- [More info on the wiki](https://github.com/cujojs/when/wiki)\n\nInstallation\n------------\n\n#### AMD\n\nAvailble as `when` through [bower](http://bower.io) and [yeoman](https://github.com/yeoman/yo), or just clone the repo and load `when.js` from the root. When.js is AMD-compatible out of the box, so no need for shims.\n\n#### CommonJS/Node\n\n```\nnpm install when\n```\n\n[More help & other environments &raquo;](docs/installation.md)\n\nUsage\n-----\n\nPromises can be used to help manage complex and/or nested callback flows in a simple manner. To get a better handle on how promise flows look and how they can be helpful, there are a couple examples below (using commonjs).\n\nThis first example will print `\"hello world!!!!\"` if all went well, or `\"drat!\"` if there was a problem. It also uses [rest](https://github.com/cujojs/rest) to make an ajax request to a (fictional) external service.\n\n```js\nvar rest = require('rest');\n\nfetchRemoteGreeting()\n    .then(addExclamation)\n    .catch(handleError)\n    .done(function(greeting) {\n        console.log(greeting);\n    });\n\nfunction fetchRemoteGreeting() {\n    // returns a when.js promise for 'hello world'\n    return rest('http://example.com/greeting');\n}\n\nfunction addExclamation(greeting) {\n    return greeting + '!!!!'\n}\n\nfunction handleError(e) {\n    return 'drat!';\n}\n```\n\nThe second example shows off the power that comes with when's promise logic. Here, we get an array of numbers from a remote source and reduce them. The example will print `150` if all went well, and if there was a problem will print a full stack trace.\n\n```js\nvar when = require('when');\nvar rest = require('rest');\n\nwhen.reduce(when.map(getRemoteNumberList(), times10), sum)\n    .done(function(result) {\n        console.log(result);\n    });\n\nfunction getRemoteNumberList() {\n    // Get a remote array [1, 2, 3, 4, 5]\n    return rest('http://example.com/numbers').then(JSON.parse);\n}\n\nfunction sum(x, y) { return x + y; }\nfunction times10(x) {return x * 10; }\n```\n\n- For more examples, see [examples &raquo;](https://github.com/cujojs/when/wiki/Examples)\n- For the full documentation see [api docs &raquo;](docs/api.md#api)\n\nLicense\n-------\n\nLicensed under MIT. [See the license here &raquo;](LICENSE.txt)\n\nContributing\n------------\n\nPlease see the [contributing guide](CONTRIBUTING.md) for more information on running tests, opening issues, and contributing code to the project.\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n",
  "readmeFilename": "README.md",
  "_id": "when@2.7.1",
  "dist": {
    "shasum": "445b834ae6059c0d4772f55b079f994ddd6f5b2a"
  },
  "_from": "when@",
  "_resolved": "https://registry.npmjs.org/when/-/when-2.7.1.tgz"
}
